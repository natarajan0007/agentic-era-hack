# IMPORTANT: The 'host' below is set to 'host.docker.internal', which works for local Docker.
# When deploying to Cloud Run, you MUST replace this with the actual IP address or DNS name of your PostgreSQL database.
# It is also highly recommended to store the 'password' in Google Secret Manager and reference it here.

sources:
  my-pg-source:
    kind: cloud-sql-postgres
    project: "${gcp_project_id}"
    region: "${gcp_region}"
    instance: "${db_instance_name}"
    database: "intellica"
    user: "postgres"
    password: "${db_password}"
  fastapi-backend:
    kind: http
    baseUrl: "https://fastapi-backend-${gcp_project_number}.europe-west1.run.app"

tools:
  search_tickets:
    kind: postgres-sql
    source: my-pg-source
    description: "Search for tickets based on various criteria like status, priority, assignee, or reporter."
    parameters:
      - name: status
        type: string
        description: "The status of the ticket to search for (e.g., 'OPEN', 'IN_PROGRESS')."
      - name: priority
        type: string
        description: "The priority of the ticket to search for (e.g., 'LOW', 'MEDIUM', 'HIGH')."
      - name: assigned_to_id
        type: integer
        description: "The ID of the user the ticket is assigned to."
      - name: reported_by_id
        type: integer
        description: "The ID of the user who reported the ticket."
    statement: >
      SELECT id, title, status, priority, created_at, updated_at
      FROM tickets
      WHERE (status = $1 OR $1 IS NULL)
      AND (priority = $2 OR $2 IS NULL)
      AND (assigned_to_id = $3 OR $3 IS NULL)
      AND (reported_by_id = $4 OR $4 IS NULL)
      ORDER BY created_at DESC;

  get_ticket_details:
    kind: postgres-sql
    source: my-pg-source
    description: "Get detailed information about a specific ticket by its ID."
    parameters:
      - name: ticket_id
        type: string
        description: "The ID of the ticket to retrieve."
    statement: "SELECT * FROM tickets WHERE id = $1;"

  search_knowledge_articles:
    kind: postgres-sql
    source: my-pg-source
    description: "Search for knowledge base articles by a search term."
    parameters:
      - name: search_term
        type: string
        description: "The term to search for in the title and content of knowledge articles."
    statement: >
      SELECT id, title, summary, article_type, status
      FROM knowledge_articles
      WHERE title ILIKE '%' || $1 || '%' OR content ILIKE '%' || $1 || '%'
      AND status = 'PUBLISHED'
      ORDER BY view_count DESC;

  get_user_details:
    kind: postgres-sql
    source: my-pg-source
    description: "Get details of a user by their ID."
    parameters:
      - name: user_id
        type: integer
        description: "The ID of the user to retrieve."
    statement: "SELECT id, email, name, role, is_active FROM users WHERE id = $1;"

  create_ticket_http:
    kind: http
    source: fastapi-backend
    description: "Create a new ticket using the API."
    method: post
    path: /api/v1/tickets/json
    requestBody: |
      {
        "title": "{{.title}}",
        "description": "{{.description}}",
        "priority": "{{.priority}}",
        "category": "{{.category}}",
        "department_id": {{.department_id}},
        "tags": {{json .tags}}
      }
    bodyParams:
      - name: title
        type: string
        description: "The title of the ticket."
      - name: description
        type: string
        description: "The description of the ticket."
      - name: priority
        type: string
        description: "The priority of the ticket."
      - name: category
        type: string
        description: "The category of the ticket."
      - name: department_id
        type: integer
        description: "The ID of the department for the ticket."
      - name: tags
        type: array
        items:
          type: string
        description: "A list of tags for the ticket."


toolsets:
  my-toolset:
    - search_tickets
    - get_ticket_details
    - search_knowledge_articles
    - get_user_details
    - create_ticket_http
