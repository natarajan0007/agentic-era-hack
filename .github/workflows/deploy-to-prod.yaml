name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated: adk-agent,fastapi-backend,nextjs-frontend or "all")'
        required: true
        default: 'all'
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string
      git_ref:
        description: 'Git reference to deploy (branch/tag/commit)'
        required: false
        default: 'main'
        type: string

env:
  GCP_REGION: ${{ vars.REGION }}
  PROD_PROJECT_ID: ${{ vars.PROD_PROJECT_ID }}
  REPOSITORY_NAME: ${{ vars.REPOSITORY_NAME }}

jobs:
  # Security check to prevent accidental deployments
  validate-deployment:
    runs-on: ubuntu-latest
    outputs:
      deploy-adk-agent: ${{ steps.parse-services.outputs.deploy-adk-agent }}
      deploy-fastapi-backend: ${{ steps.parse-services.outputs.deploy-fastapi-backend }}
      deploy-nextjs-frontend: ${{ steps.parse-services.outputs.deploy-nextjs-frontend }}
    steps:
      - name: Validate confirmation
        if: ${{ github.event.inputs.confirm_deployment != 'DEPLOY' }}
        run: |
          echo "❌ Production deployment not confirmed. Please type 'DEPLOY' in the confirmation field."
          exit 1
          
      - name: Parse services to deploy
        id: parse-services
        run: |
          SERVICES="${{ github.event.inputs.services }}"
          
          if [[ "$SERVICES" == "all" ]]; then
            echo "deploy-adk-agent=true" >> $GITHUB_OUTPUT
            echo "deploy-fastapi-backend=true" >> $GITHUB_OUTPUT  
            echo "deploy-nextjs-frontend=true" >> $GITHUB_OUTPUT
          else
            # Default to false
            echo "deploy-adk-agent=false" >> $GITHUB_OUTPUT
            echo "deploy-fastapi-backend=false" >> $GITHUB_OUTPUT
            echo "deploy-nextjs-frontend=false" >> $GITHUB_OUTPUT
            
            # Check each service
            if [[ "$SERVICES" == *"adk-agent"* ]]; then
              echo "deploy-adk-agent=true" >> $GITHUB_OUTPUT
            fi
            if [[ "$SERVICES" == *"fastapi-backend"* ]]; then
              echo "deploy-fastapi-backend=true" >> $GITHUB_OUTPUT
            fi
            if [[ "$SERVICES" == *"nextjs-frontend"* ]]; then
              echo "deploy-nextjs-frontend=true" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Display deployment plan
        run: |
          echo "## 🚀 Production Deployment Plan" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Reference**: ${{ github.event.inputs.git_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: ${{ github.event.inputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.PROD_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY

  deploy-adk-agent-prod:
    needs: validate-deployment
    if: needs.validate-deployment.outputs.deploy-adk-agent == 'true'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref }}
          
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ vars.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL_ID }}/providers/${{ secrets.WIF_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true
          
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
        
      - name: Build and push Docker image
        run: |
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROD_PROJECT_ID }}/adk-agent-repo/adk-agent:${{ github.sha }}"
          echo "Building image: $IMAGE_URL"
          
          gcloud builds submit ./services/adk-agent \
            --tag "$IMAGE_URL" \
            --project=${{ env.PROD_PROJECT_ID }} \
            --timeout=30m \
            --machine-type=e2-highcpu-8
            
      - name: Deploy to Cloud Run
        run: |
          echo "Deploying adk-agent to production..."
          
          gcloud run deploy adk-agent \
            --image "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROD_PROJECT_ID }}/adk-agent-repo/adk-agent:${{ github.sha }}" \
            --region ${{ env.GCP_REGION }} \
            --service-account "${{ vars.APP_SA_EMAIL_PROD }}" \
            --project=${{ env.PROD_PROJECT_ID }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=production" \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=50 \
            --timeout=900s \
            --concurrency=100 \
            --cpu-throttling \
            --execution-environment=gen2 \
            --no-traffic

      - name: Route traffic to new revision
        run: |
          echo "Routing 100% traffic to new revision..."
          gcloud run services update-traffic adk-agent \
            --to-latest \
            --region ${{ env.GCP_REGION }} \
            --project=${{ env.PROD_PROJECT_ID }}

  deploy-fastapi-backend-prod:
    needs: validate-deployment  
    if: needs.validate-deployment.outputs.deploy-fastapi-backend == 'true'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref }}
          
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ vars.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL_ID }}/providers/${{ secrets.WIF_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true
          
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
        
      - name: Build and push Docker image
        run: |
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROD_PROJECT_ID }}/fastapi-backend-repo/fastapi-backend:${{ github.sha }}"
          echo "Building image: $IMAGE_URL"
          
          gcloud builds submit ./services/fastapi-backend \
            --tag "$IMAGE_URL" \
            --project=${{ env.PROD_PROJECT_ID }} \
            --timeout=30m \
            --machine-type=e2-highcpu-8
            
      - name: Deploy to Cloud Run
        run: |
          echo "Deploying fastapi-backend to production..."
          
          gcloud run deploy fastapi-backend \
            --image "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROD_PROJECT_ID }}/fastapi-backend-repo/fastapi-backend:${{ github.sha }}" \
            --region ${{ env.GCP_REGION }} \
            --service-account "${{ vars.APP_SA_EMAIL_PROD }}" \
            --project=${{ env.PROD_PROJECT_ID }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=production" \
            --memory=4Gi \
            --cpu=4 \
            --min-instances=2 \
            --max-instances=100 \
            --timeout=900s \
            --concurrency=80 \
            --cpu-throttling \
            --execution-environment=gen2 \
            --no-traffic

      - name: Route traffic to new revision
        run: |
          echo "Routing 100% traffic to new revision..."
          gcloud run services update-traffic fastapi-backend \
            --to-latest \
            --region ${{ env.GCP_REGION }} \
            --project=${{ env.PROD_PROJECT_ID }}

  deploy-nextjs-frontend-prod:
    needs: validate-deployment
    if: needs.validate-deployment.outputs.deploy-nextjs-frontend == 'true'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref }}
          
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ vars.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL_ID }}/providers/${{ secrets.WIF_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true
          
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
        
      - name: Build and push Docker image
        run: |
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROD_PROJECT_ID }}/nextjs-frontend-repo/nextjs-frontend:${{ github.sha }}"
          echo "Building image: $IMAGE_URL"
          
          gcloud builds submit ./services/nextjs-frontend \
            --tag "$IMAGE_URL" \
            --project=${{ env.PROD_PROJECT_ID }} \
            --timeout=30m \
            --machine-type=e2-highcpu-8
            
      - name: Deploy to Cloud Run
        run: |
          echo "Deploying nextjs-frontend to production..."
          
          gcloud run deploy nextjs-frontend \
            --image "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROD_PROJECT_ID }}/nextjs-frontend-repo/nextjs-frontend:${{ github.sha }}" \
            --region ${{ env.GCP_REGION }} \
            --service-account "${{ vars.APP_SA_EMAIL_PROD }}" \
            --project=${{ env.PROD_PROJECT_ID }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=production" \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=50 \
            --timeout=900s \
            --concurrency=100 \
            --cpu-throttling \
            --execution-environment=gen2 \
            --no-traffic

      - name: Route traffic to new revision
        run: |
          echo "Routing 100% traffic to new revision..."
          gcloud run services update-traffic nextjs-frontend \
            --to-latest \
            --region ${{ env.GCP_REGION }} \
            --project=${{ env.PROD_PROJECT_ID }}

  post-deployment:
    needs: [validate-deployment, deploy-adk-agent-prod, deploy-fastapi-backend-prod, deploy-nextjs-frontend-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate deployment report
        run: |
          echo "## 📊 Production Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID**: \`${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Initiated by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Reference**: ${{ github.event.inputs.git_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Status:" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-deployment.outputs.deploy-adk-agent }}" == "true" ]]; then
            echo "- **ADK Agent**: ${{ needs.deploy-adk-agent-prod.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.validate-deployment.outputs.deploy-fastapi-backend }}" == "true" ]]; then
            echo "- **FastAPI Backend**: ${{ needs.deploy-fastapi-backend-prod.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.validate-deployment.outputs.deploy-nextjs-frontend }}" == "true" ]]; then
            echo "- **Next.js Frontend**: ${{ needs.deploy-nextjs-frontend-prod.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY